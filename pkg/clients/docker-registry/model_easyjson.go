// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package docker_registry

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry(in *jlexer.Lexer, out *RepoTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repoName":
			out.RepoName = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "externalRegistry":
			out.ExternalRegistry = string(in.String())
		case "userName":
			out.UserName = string(in.String())
		case "passWord":
			out.PassWord = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry(out *jwriter.Writer, in RepoTag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repoName\":"
		out.RawString(prefix[1:])
		out.String(string(in.RepoName))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"externalRegistry\":"
		out.RawString(prefix)
		out.String(string(in.ExternalRegistry))
	}
	{
		const prefix string = ",\"userName\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"passWord\":"
		out.RawString(prefix)
		out.String(string(in.PassWord))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RepoTag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RepoTag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RepoTag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RepoTag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry(l, v)
}
func easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry1(in *jlexer.Lexer, out *ManifestSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ManifestSlice, 0, 0)
			} else {
				*out = ManifestSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Manifest
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry1(out *jwriter.Writer, in ManifestSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry1(l, v)
}
func easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry2(in *jlexer.Lexer, out *Manifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mediaType":
			out.MediaType = string(in.String())
		case "schemaVersion":
			out.SchemaVersion = int(in.Int())
		case "repoTag":
			(out.RepoTag).UnmarshalEasyJSON(in)
		case "config":
			(out.Config).UnmarshalEasyJSON(in)
		case "layers":
			if in.IsNull() {
				in.Skip()
				out.Layers = nil
			} else {
				in.Delim('[')
				if out.Layers == nil {
					if !in.IsDelim(']') {
						out.Layers = make([]Layer, 0, 1)
					} else {
						out.Layers = []Layer{}
					}
				} else {
					out.Layers = (out.Layers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Layer
					(v4).UnmarshalEasyJSON(in)
					out.Layers = append(out.Layers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry2(out *jwriter.Writer, in Manifest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mediaType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MediaType))
	}
	{
		const prefix string = ",\"schemaVersion\":"
		out.RawString(prefix)
		out.Int(int(in.SchemaVersion))
	}
	{
		const prefix string = ",\"repoTag\":"
		out.RawString(prefix)
		(in.RepoTag).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		(in.Config).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"layers\":"
		out.RawString(prefix)
		if in.Layers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Layers {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Manifest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Manifest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Manifest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Manifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry2(l, v)
}
func easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry3(in *jlexer.Lexer, out *Layer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mediaType":
			out.MediaType = string(in.String())
		case "digest":
			out.Digest = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "blobPath":
			out.BlobPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry3(out *jwriter.Writer, in Layer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mediaType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MediaType))
	}
	{
		const prefix string = ",\"digest\":"
		out.RawString(prefix)
		out.String(string(in.Digest))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"blobPath\":"
		out.RawString(prefix)
		out.String(string(in.BlobPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Layer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Layer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Layer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Layer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry3(l, v)
}
func easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry4(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mediaType":
			out.MediaType = string(in.String())
		case "digest":
			out.Digest = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "blobPath":
			out.BlobPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry4(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mediaType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MediaType))
	}
	{
		const prefix string = ",\"digest\":"
		out.RawString(prefix)
		out.String(string(in.Digest))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"blobPath\":"
		out.RawString(prefix)
		out.String(string(in.BlobPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRuijieComCnDevopsPackagebuilderPkgClientsDockerRegistry4(l, v)
}
